#include <string>#include <iostream>#include <algorithm>using namespace std;string transPlainToCipher(const string& plaintext, const string& secretKeyWord) {    string ciphertext = "";    int secretKeySize = secretKeyWord.size();    for (unsigned int i = 0; i < plaintext.size(); ++i) {        if (plaintext[i] != ' ') {            char c = static_cast<char>((plaintext[i] - 'a' + secretKeyWord[i % secretKeySize] - 'a') % 26 + 'a');            ciphertext += c;        } else {            ciphertext += ' ';        }    }    return ciphertext;}string transCipherToPlain(const string& ciphertext, const string& secretKeyWord) {    string plaintext = "";    int secretKeySize = secretKeyWord.size();    for (unsigned int i = 0; i < ciphertext.size(); ++i) {        if (ciphertext[i] != ' ') {            char c = static_cast<char>((ciphertext[i] - 'a' - (secretKeyWord[i % secretKeySize] - 'a') + 26) % 26 + 'a');            plaintext += c;        } else {            plaintext += ' ';        }    }    return plaintext;}int main() {    string secretKeyWord = "laptrinhmangcanban";    string input;    cout << "Enter the plaintext: ";    getline(cin, input);    string lowercaseInput = input;    transform(lowercaseInput.begin(), lowercaseInput.end(), lowercaseInput.begin(), ::tolower);    string encrypted = transPlainToCipher(lowercaseInput, secretKeyWord);    cout << "Encrypted ciphertext: " << encrypted << endl;    string decrypted = transCipherToPlain(encrypted, secretKeyWord);    cout << "Decrypted plaintext: " << decrypted << endl;    return 0;}